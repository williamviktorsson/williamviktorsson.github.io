import{f as z,g as r,t as s,i as d,j as e,k as u}from"../chunks/disclose-version.BAOoFInd.js";import{s as y,B as te,z as ae,f as re}from"../chunks/runtime.Bix74eL6.js";import{e as P}from"../chunks/render.DvSWKrhB.js";import{b as le}from"../chunks/this.wyHJEu0o.js";import{S as se,C as ie}from"../chunks/split.DmvM2kU1.js";import{P as ne,S as c,T as m,C as g}from"../chunks/content.Cka6NWLM.js";import{F as oe}from"../chunks/front.DzTqcsJY.js";var de=s('<ol><li class="fragment">Utöka server till att erbjuda persistent datalagring</li> <li class="fragment">Nyttja ultrasimpel lokal NoSQL databas</li> <ul><li class="fragment">Inte den som var planerad, men den nya jag valt är väldigt lik!</li></ul> <li class="fragment">Förberedelse för att lära sig använda Firebase Firestore</li></ol>'),ue=s("<!> <!>",5),ce=s('<ol><li class="fragment">Avancerade Dart-koncept (mixins, extension methods, extension types, patterns, ...)</li> <li class="fragment">Inget som examineras under Dart-kursen som slutar vecka 45.</li> <li class="fragment">Gott och blandat som kan dyka upp under Flutter-utveckling</li></ol>'),me=s("<!> <!>",5),ge=s('<div class="mt-60 text-center">Dra fram en whiteboard igen! Vad ändras denna vecka?</div>'),ve=s("<!> <!>",5),fe=s('<ul><li class="fragment">Du har uppdaterat dina repositories till att vara async</li> <li class="fragment">Du gör await på alla async-funktioner och funktioner som kör async-funktioner.</li> <li class="fragment">För att möta denna gränsyta har du också lagt till int id i alla modellklasser</li> <li class="fragment">Du har handlers på din server som motsvarar alla operationer som systemet ska stödja</li> <li class="fragment">Ditt CLI fungerar som förväntat.</li></ul> <div><div class="enter"><!></div></div>',1),pe=s("<!> <!>",5),_e=s('<div class="mt-60 text-center">Orientera lite i dagens kodexempel som finns på GitHub.</div>'),$e=s("<!> <!>",5),be=s(`<ol><li class="fragment">Tre dart-projekt.</li> <ul><li class="fragment">Ett nytt som jag kallar shared där jag samlar koden som både CLI och server nyttjar.</li> <li class="fragment">Skapat med detta kommando:</li> <ul><li style="list-style: none;" class="fragment"><code class="svelte-1322xwn"> </code></li></ul> <li class="fragment">Har kod för models och mitt repository interface som både CLI och server
						nyttjar/implementerar</li> <li class="fragment">Inget ni behöver fixa men jag blev less efter ett tag på att ha duplicerad kod :-)</li></ul> <li class="fragment">Jag har struntat i abstrakta generiska klasser och bytt till interface</li> <ul><li class="fragment">För att undvika förvirring.</li> <li class="fragment">Det blir mer läsbar kod om alla Repositories implementerar sin egen logik.</li> <li class="fragment">Däremot mer repetition...</li></ul></ol>`),he=s("<!> <!>",5),ke=s('<ol><li class="fragment">Servern består uteslutande av två saker:</li> <ul><li class="fragment">Handlers för HTTP request för olika routes</li> <li class="fragment">Implementationen av de repositories som servern använder för lokal datalagring.</li></ul> <li class="fragment">Klienten (CLI) består av fyra saker:</li> <ul><li class="fragment">Kod för att visa och navigera mellan menyer</li> <li class="fragment">Kod för att utföra de operationer som presenteras som val i menyerna.</li> <ul><li class="fragment">Läser och hanterar input från användaren.</li></ul> <li class="fragment">Lite utils för att validera input</li> <li class="fragment">Implementationen av de repositories som klienten använder för kommunikation med servern.</li></ul></ol>'),ye=s("<!> <!>",5),xe=s('<ol><li class="fragment">Lägg till objectbox till din server och modelkod:</li> <ul><li style="list-style: none;" class="fragment"><code class="svelte-1322xwn">dart pub add objectbox</code></li></ul> <li class="fragment">Lägg till paket för kodgenerering:</li> <ul><li style="list-style: none;" class="fragment"><code class="svelte-1322xwn">dart pub add --dev build_runner objectbox_generator:any</code></li></ul> <li class="fragment">Lägg till <code class="svelte-1322xwn">@Entity</code> och <code class="svelte-1322xwn">@Id</code> annotationer till dina modell klasser.</li> <li class="fragment">Generera objectbox kod(som du aldrig kommer behöva röra sedan)</li> <ul><li style="list-style: none;" class="fragment"><code class="svelte-1322xwn">dart run build_runner build</code></li></ul> <li class="fragment">Ladda ned c-biblioteket för objectbox. Detta är kanske det mest tekniska steget :-)</li> <ul><li class="fragment">Navigera till <a href="https://github.com/objectbox/objectbox-c/releases" class="svelte-1322xwn">https://github.com/objectbox/objectbox-c/releases</a> och välj senaste release för din plattform.</li> <ul><li class="fragment">Välj filen som heter objectbox-operativsystem. Alltså inte dem som innehåller sync eller jni</li></ul> <li class="fragment">Unzip och placera innehållet i <code class="svelte-1322xwn">/lib</code> direkt under <code class="svelte-1322xwn">/lib</code> i serverprojektet.</li></ul> <li class="fragment">Byt ut din lokala datalagring mot att kommunicera med en ObjectBox.</li> <ul><li class="fragment">Getting started guiden här med Dart Native som val är bra:</li> <ul><li class="fragment"><a href="https://docs.objectbox.io/getting-started" class="svelte-1322xwn">https://docs.objectbox.io/getting-started</a></li></ul></ul></ol>'),je=s("<!> <!>",5),we=s(`<ol><li class="fragment">För klasser som har nästlade klasser behöver du göra lite magi eftersom ObjectBox endast
					stödjer lagring av primitiva datatyper</li> <ul><li class="fragment">Du kan använda en getter+setter för att lagra en serializerad version av ditt nästlade
						data.</li></ul> <li class="fragment">Det finns stöd för relationer i ObjectBox som du kan nyttja</li> <ul><li class="fragment">Däremot finns inte det i Firebase Firestore så därför bör vi undvika det</li></ul> <li class="fragment">Det är okej att lagra duplicerat data i denna uppgift</li> <ul><li class="fragment">När samma data förekommer på samma ställe i en databas kallas datat <code class="svelte-1322xwn">denormaliserat</code></li></ul> <li class="fragment">En vanlig lösning på relationer i NoSQL-databaser är att en till kollektion introduceras
					endast för att representera relationerna.</li> <li class="fragment">En annan lösning är att endast id:n till objekt i relation lagras, och därefter får dessa
					objekt hämtas.</li> <li class="fragment">Här är två lämpliga videor för utvecklare med SQL-bakgrund som vill lära sig mer:</li> <ul><li class="fragment"><a href="https://www.youtube.com/watch?v=ran_Ylug7AE&amp;list=PLl-K7zZEsYLlP-k-RKFa7RyNPa9_wCH2s&amp;index=2" class="svelte-1322xwn">Converting SQL structures to Firebase structures #2</a></li> <li class="fragment"><a href="https://www.youtube.com/watch?v=haMOUb3KVSo&amp;list=PLl-K7zZEsYLluG5MCVEzXAQ7ACZBCuZgZ&amp;index=5" class="svelte-1322xwn">How to Structure Your Data #5</a></li></ul></ol>`),Pe=s("<!> <!>",5),Ie=s('<div class="mt-60 text-center">Det var allt för idag!</div>'),Fe=s("<!> <!>",5),Te=s('<!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <!> <div class="date svelte-1322xwn"><p class="mb-2 text-xl" id="date"> </p> <p class="text-xl">Stockholms Tekniska Institut</p></div>',5);function Ke(O){const G={year:"numeric",month:"long",day:"numeric"},Q=new Date().toLocaleDateString("sv-SE",G);let p,_=re(!1);var I=z(!0),Z=d(I);ne(Z,{options:{history:!0,transition:"slide",controls:!0,progress:!1,autoAnimateEasing:"ease",autoAnimateUnmatched:!0},children:(M,Se)=>{var F=Te(),T=d(F);oe(T,{});var L=e(e(T,!0));c(L,{children:(i,v)=>{var t=ue(),a=d(t);m(a,{title:"Föreläsning 4 - Fortsättning serverprogrammering"});var n=e(e(a,!0));g(n,{children:(o,f)=>{var l=de();r(o,l)},$$slots:{default:!0}}),r(i,t)},$$slots:{default:!0}});var S=e(e(L,!0));c(S,{children:(i,v)=>{var t=me(),a=d(t);m(a,{title:"Nästa vecka"});var n=e(e(a,!0));g(n,{children:(o,f)=>{var l=ce();r(o,l)},$$slots:{default:!0}}),r(i,t)},$$slots:{default:!0}});var D=e(e(S,!0));c(D,{children:(i,v)=>{var t=ve(),a=d(t);m(a,{title:"Visualisering"});var n=e(e(a,!0));g(n,{children:(o,f)=>{var l=ge();r(o,l)},$$slots:{default:!0}}),r(i,t)},$$slots:{default:!0}});var H=e(e(D,!0));c(H,{in:async()=>{y(_,!1),await p.update``},children:(i,v)=>{var t=pe(),a=d(t);m(a,{title:"Nödvändiga förutsättningar"});var n=e(e(a,!0));g(n,{children:(o,f)=>{var l=z(!0),x=d(l);se(x,{children:(j,R)=>{var $=fe(),b=d($),h=u(b),w=e(e(h,!0)),k=e(e(w,!0)),q=e(e(k,!0)),X=e(e(b,!0)),V=u(X),W=u(V);le(ie(W,{code:"",theme:"catppuccin-frappe",lang:"dart",autoIndent:!0,options:{duration:600,stagger:15,containerStyle:!1,lineNumbers:!0},class:"overflow-y-clip"}),ee=>p=ee,()=>p),te(()=>V.hidden=!ae(_)),P("current",h,async()=>{y(_,!0),await p.update`abstract interface class RepositoryInterface<T> {
  Future<T> create(T item);
  Future<List<T>> getAll();
  Future<T?> getById(int id);
  Future<T> update(int id, T item);
  Future<T> delete(int id);
}`},!1),P("current",k,async()=>{y(_,!0),await p.update`abstract interface class RepositoryInterface<T> {
Future<T> create(T item);
Future<List<T>> getAll();
Future<T?> getById(int id);
Future<T> update(int id, T item);
Future<T> delete(int id);

// Exempel model

class Item {
  final String description;
  final int id;

  Item(this.description, [this.id = -1]);

  factory Item.fromJson(Map<String, dynamic> json) {
    return Item(json['description'], json['id']);
  }

  Map<String, dynamic> toJson() {
    return {"description": description, "id": id};
  }
}

}`},!1),P("current",q,async()=>{y(_,!0),await p.update`// Configure example routes.
final router = Router();

router.post('/items', postItemHandler); // create an item
router.get('/items', getItemsHandler); // get all items
router.get('/items/<id>', getItemHandler); // get specific item
router.put('/items/<id>', updateItemHandler); // update specific item
router.delete('/items/<id>', deleteItemHandler); // update specific item

router.post('/bags', postBagHandler); // create a bag
router.get('/bags', getBagsHandler); // get all bags
router.get('/bags/<id>', getBagHandler); // get specific bag
router.put('/bags/<id>', updateBagHandler); // update specific bag
router.delete('/bags/<id>', deleteBagHandler); // update specific bag`},!1),r(j,$)},$$slots:{default:!0}}),r(o,l)},$$slots:{default:!0}}),r(i,t)},$$slots:{default:!0}});var B=e(e(H,!0));c(B,{children:(i,v)=>{var t=$e(),a=d(t);m(a,{title:"Referenskod"});var n=e(e(a,!0));g(n,{children:(o,f)=>{var l=_e();r(o,l)},$$slots:{default:!0}}),r(i,t)},$$slots:{default:!0}});var C=e(e(B,!0));c(C,{children:(i,v)=>{var t=he(),a=d(t);m(a,{title:"Vad har jag gjort?!"});var n=e(e(a,!0));g(n,{children:(o,f)=>{var l=be(),x=u(l),j=e(e(x,!0)),R=u(j),$=e(e(R,!0)),b=e(e($,!0)),h=u(b),w=u(h),k=u(w);k.nodeValue="dart create -t package cli_shared",r(o,l)},$$slots:{default:!0}}),r(i,t)},$$slots:{default:!0}});var E=e(e(C,!0));c(E,{children:(i,v)=>{var t=ye(),a=d(t);m(a,{title:"Projektstrukturer?!"});var n=e(e(a,!0));g(n,{children:(o,f)=>{var l=ke();r(o,l)},$$slots:{default:!0}}),r(i,t)},$$slots:{default:!0}});var N=e(e(E,!0));c(N,{children:(i,v)=>{var t=je(),a=d(t);m(a,{title:"Kom igång med ObjectBox!"});var n=e(e(a,!0));g(n,{children:(o,f)=>{var l=xe();r(o,l)},$$slots:{default:!0}}),r(i,t)},$$slots:{default:!0}});var A=e(e(N,!0));c(A,{children:(i,v)=>{var t=Pe(),a=d(t);m(a,{title:"Relationer? Begränsningar?"});var n=e(e(a,!0));g(n,{children:(o,f)=>{var l=we();r(o,l)},$$slots:{default:!0}}),r(i,t)},$$slots:{default:!0}});var K=e(e(A,!0));c(K,{children:(i,v)=>{var t=Fe(),a=d(t);m(a,{title:"Tack för idag!"});var n=e(e(a,!0));g(n,{children:(o,f)=>{var l=Ie();r(o,l)},$$slots:{default:!0}}),r(i,t)},$$slots:{default:!0}});var U=e(e(K,!0)),Y=u(U),J=u(Y);J.nodeValue=Q,r(M,F)},$$slots:{default:!0}}),r(O,I)}export{Ke as component};
